// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/aid95/zaksim-discord-bot/ent/commute"
	"github.com/aid95/zaksim-discord-bot/ent/predicate"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCommute = "Commute"
)

// CommuteMutation represents an operation that mutates the Commute nodes in the graph.
type CommuteMutation struct {
	config
	op            Op
	typ           string
	id            *int
	channel_id    *string
	author_id     *string
	go_to_work_at *time.Time
	get_off_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Commute, error)
	predicates    []predicate.Commute
}

var _ ent.Mutation = (*CommuteMutation)(nil)

// commuteOption allows management of the mutation configuration using functional options.
type commuteOption func(*CommuteMutation)

// newCommuteMutation creates new mutation for the Commute entity.
func newCommuteMutation(c config, op Op, opts ...commuteOption) *CommuteMutation {
	m := &CommuteMutation{
		config:        c,
		op:            op,
		typ:           TypeCommute,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCommuteID sets the ID field of the mutation.
func withCommuteID(id int) commuteOption {
	return func(m *CommuteMutation) {
		var (
			err   error
			once  sync.Once
			value *Commute
		)
		m.oldValue = func(ctx context.Context) (*Commute, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Commute.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCommute sets the old Commute of the mutation.
func withCommute(node *Commute) commuteOption {
	return func(m *CommuteMutation) {
		m.oldValue = func(context.Context) (*Commute, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CommuteMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CommuteMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *CommuteMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetChannelID sets the "channel_id" field.
func (m *CommuteMutation) SetChannelID(s string) {
	m.channel_id = &s
}

// ChannelID returns the value of the "channel_id" field in the mutation.
func (m *CommuteMutation) ChannelID() (r string, exists bool) {
	v := m.channel_id
	if v == nil {
		return
	}
	return *v, true
}

// OldChannelID returns the old "channel_id" field's value of the Commute entity.
// If the Commute object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommuteMutation) OldChannelID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldChannelID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldChannelID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChannelID: %w", err)
	}
	return oldValue.ChannelID, nil
}

// ResetChannelID resets all changes to the "channel_id" field.
func (m *CommuteMutation) ResetChannelID() {
	m.channel_id = nil
}

// SetAuthorID sets the "author_id" field.
func (m *CommuteMutation) SetAuthorID(s string) {
	m.author_id = &s
}

// AuthorID returns the value of the "author_id" field in the mutation.
func (m *CommuteMutation) AuthorID() (r string, exists bool) {
	v := m.author_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthorID returns the old "author_id" field's value of the Commute entity.
// If the Commute object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommuteMutation) OldAuthorID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldAuthorID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldAuthorID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthorID: %w", err)
	}
	return oldValue.AuthorID, nil
}

// ResetAuthorID resets all changes to the "author_id" field.
func (m *CommuteMutation) ResetAuthorID() {
	m.author_id = nil
}

// SetGoToWorkAt sets the "go_to_work_at" field.
func (m *CommuteMutation) SetGoToWorkAt(t time.Time) {
	m.go_to_work_at = &t
}

// GoToWorkAt returns the value of the "go_to_work_at" field in the mutation.
func (m *CommuteMutation) GoToWorkAt() (r time.Time, exists bool) {
	v := m.go_to_work_at
	if v == nil {
		return
	}
	return *v, true
}

// OldGoToWorkAt returns the old "go_to_work_at" field's value of the Commute entity.
// If the Commute object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommuteMutation) OldGoToWorkAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldGoToWorkAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldGoToWorkAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoToWorkAt: %w", err)
	}
	return oldValue.GoToWorkAt, nil
}

// ResetGoToWorkAt resets all changes to the "go_to_work_at" field.
func (m *CommuteMutation) ResetGoToWorkAt() {
	m.go_to_work_at = nil
}

// SetGetOffAt sets the "get_off_at" field.
func (m *CommuteMutation) SetGetOffAt(t time.Time) {
	m.get_off_at = &t
}

// GetOffAt returns the value of the "get_off_at" field in the mutation.
func (m *CommuteMutation) GetOffAt() (r time.Time, exists bool) {
	v := m.get_off_at
	if v == nil {
		return
	}
	return *v, true
}

// OldGetOffAt returns the old "get_off_at" field's value of the Commute entity.
// If the Commute object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CommuteMutation) OldGetOffAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldGetOffAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldGetOffAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGetOffAt: %w", err)
	}
	return oldValue.GetOffAt, nil
}

// ResetGetOffAt resets all changes to the "get_off_at" field.
func (m *CommuteMutation) ResetGetOffAt() {
	m.get_off_at = nil
}

// Op returns the operation name.
func (m *CommuteMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Commute).
func (m *CommuteMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CommuteMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.channel_id != nil {
		fields = append(fields, commute.FieldChannelID)
	}
	if m.author_id != nil {
		fields = append(fields, commute.FieldAuthorID)
	}
	if m.go_to_work_at != nil {
		fields = append(fields, commute.FieldGoToWorkAt)
	}
	if m.get_off_at != nil {
		fields = append(fields, commute.FieldGetOffAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CommuteMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case commute.FieldChannelID:
		return m.ChannelID()
	case commute.FieldAuthorID:
		return m.AuthorID()
	case commute.FieldGoToWorkAt:
		return m.GoToWorkAt()
	case commute.FieldGetOffAt:
		return m.GetOffAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CommuteMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case commute.FieldChannelID:
		return m.OldChannelID(ctx)
	case commute.FieldAuthorID:
		return m.OldAuthorID(ctx)
	case commute.FieldGoToWorkAt:
		return m.OldGoToWorkAt(ctx)
	case commute.FieldGetOffAt:
		return m.OldGetOffAt(ctx)
	}
	return nil, fmt.Errorf("unknown Commute field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CommuteMutation) SetField(name string, value ent.Value) error {
	switch name {
	case commute.FieldChannelID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChannelID(v)
		return nil
	case commute.FieldAuthorID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthorID(v)
		return nil
	case commute.FieldGoToWorkAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoToWorkAt(v)
		return nil
	case commute.FieldGetOffAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGetOffAt(v)
		return nil
	}
	return fmt.Errorf("unknown Commute field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CommuteMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CommuteMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CommuteMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Commute numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CommuteMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CommuteMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CommuteMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Commute nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CommuteMutation) ResetField(name string) error {
	switch name {
	case commute.FieldChannelID:
		m.ResetChannelID()
		return nil
	case commute.FieldAuthorID:
		m.ResetAuthorID()
		return nil
	case commute.FieldGoToWorkAt:
		m.ResetGoToWorkAt()
		return nil
	case commute.FieldGetOffAt:
		m.ResetGetOffAt()
		return nil
	}
	return fmt.Errorf("unknown Commute field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CommuteMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CommuteMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CommuteMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CommuteMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CommuteMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CommuteMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CommuteMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Commute unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CommuteMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Commute edge %s", name)
}
