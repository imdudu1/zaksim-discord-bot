// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/aid95/zaksim-discord-bot/ent/commute"
)

// Commute is the model entity for the Commute schema.
type Commute struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ChannelID holds the value of the "channel_id" field.
	ChannelID string `json:"channel_id,omitempty"`
	// AuthorID holds the value of the "author_id" field.
	AuthorID string `json:"author_id,omitempty"`
	// GoToWorkAt holds the value of the "go_to_work_at" field.
	GoToWorkAt time.Time `json:"go_to_work_at,omitempty"`
	// GetOffAt holds the value of the "get_off_at" field.
	GetOffAt time.Time `json:"get_off_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Commute) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case commute.FieldID:
			values[i] = &sql.NullInt64{}
		case commute.FieldChannelID, commute.FieldAuthorID:
			values[i] = &sql.NullString{}
		case commute.FieldGoToWorkAt, commute.FieldGetOffAt:
			values[i] = &sql.NullTime{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Commute", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Commute fields.
func (c *Commute) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case commute.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case commute.FieldChannelID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field channel_id", values[i])
			} else if value.Valid {
				c.ChannelID = value.String
			}
		case commute.FieldAuthorID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field author_id", values[i])
			} else if value.Valid {
				c.AuthorID = value.String
			}
		case commute.FieldGoToWorkAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field go_to_work_at", values[i])
			} else if value.Valid {
				c.GoToWorkAt = value.Time
			}
		case commute.FieldGetOffAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field get_off_at", values[i])
			} else if value.Valid {
				c.GetOffAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Commute.
// Note that you need to call Commute.Unwrap() before calling this method if this Commute
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Commute) Update() *CommuteUpdateOne {
	return (&CommuteClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Commute entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Commute) Unwrap() *Commute {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Commute is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Commute) String() string {
	var builder strings.Builder
	builder.WriteString("Commute(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", channel_id=")
	builder.WriteString(c.ChannelID)
	builder.WriteString(", author_id=")
	builder.WriteString(c.AuthorID)
	builder.WriteString(", go_to_work_at=")
	builder.WriteString(c.GoToWorkAt.Format(time.ANSIC))
	builder.WriteString(", get_off_at=")
	builder.WriteString(c.GetOffAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Commutes is a parsable slice of Commute.
type Commutes []*Commute

func (c Commutes) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
