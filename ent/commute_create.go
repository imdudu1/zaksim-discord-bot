// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/aid95/zaksim-discord-bot/ent/commute"
)

// CommuteCreate is the builder for creating a Commute entity.
type CommuteCreate struct {
	config
	mutation *CommuteMutation
	hooks    []Hook
}

// SetChannelID sets the "channel_id" field.
func (cc *CommuteCreate) SetChannelID(s string) *CommuteCreate {
	cc.mutation.SetChannelID(s)
	return cc
}

// SetAuthorID sets the "author_id" field.
func (cc *CommuteCreate) SetAuthorID(s string) *CommuteCreate {
	cc.mutation.SetAuthorID(s)
	return cc
}

// SetGoToWorkAt sets the "go_to_work_at" field.
func (cc *CommuteCreate) SetGoToWorkAt(t time.Time) *CommuteCreate {
	cc.mutation.SetGoToWorkAt(t)
	return cc
}

// SetNillableGoToWorkAt sets the "go_to_work_at" field if the given value is not nil.
func (cc *CommuteCreate) SetNillableGoToWorkAt(t *time.Time) *CommuteCreate {
	if t != nil {
		cc.SetGoToWorkAt(*t)
	}
	return cc
}

// SetGetOffAt sets the "get_off_at" field.
func (cc *CommuteCreate) SetGetOffAt(t time.Time) *CommuteCreate {
	cc.mutation.SetGetOffAt(t)
	return cc
}

// SetNillableGetOffAt sets the "get_off_at" field if the given value is not nil.
func (cc *CommuteCreate) SetNillableGetOffAt(t *time.Time) *CommuteCreate {
	if t != nil {
		cc.SetGetOffAt(*t)
	}
	return cc
}

// Mutation returns the CommuteMutation object of the builder.
func (cc *CommuteCreate) Mutation() *CommuteMutation {
	return cc.mutation
}

// Save creates the Commute in the database.
func (cc *CommuteCreate) Save(ctx context.Context) (*Commute, error) {
	var (
		err  error
		node *Commute
	)
	cc.defaults()
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CommuteMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			node, err = cc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			mut = cc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CommuteCreate) SaveX(ctx context.Context) *Commute {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (cc *CommuteCreate) defaults() {
	if _, ok := cc.mutation.GoToWorkAt(); !ok {
		v := commute.DefaultGoToWorkAt()
		cc.mutation.SetGoToWorkAt(v)
	}
	if _, ok := cc.mutation.GetOffAt(); !ok {
		v := commute.DefaultGetOffAt()
		cc.mutation.SetGetOffAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CommuteCreate) check() error {
	if _, ok := cc.mutation.ChannelID(); !ok {
		return &ValidationError{Name: "channel_id", err: errors.New("ent: missing required field \"channel_id\"")}
	}
	if _, ok := cc.mutation.AuthorID(); !ok {
		return &ValidationError{Name: "author_id", err: errors.New("ent: missing required field \"author_id\"")}
	}
	if _, ok := cc.mutation.GoToWorkAt(); !ok {
		return &ValidationError{Name: "go_to_work_at", err: errors.New("ent: missing required field \"go_to_work_at\"")}
	}
	if _, ok := cc.mutation.GetOffAt(); !ok {
		return &ValidationError{Name: "get_off_at", err: errors.New("ent: missing required field \"get_off_at\"")}
	}
	return nil
}

func (cc *CommuteCreate) sqlSave(ctx context.Context) (*Commute, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (cc *CommuteCreate) createSpec() (*Commute, *sqlgraph.CreateSpec) {
	var (
		_node = &Commute{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: commute.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: commute.FieldID,
			},
		}
	)
	if value, ok := cc.mutation.ChannelID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: commute.FieldChannelID,
		})
		_node.ChannelID = value
	}
	if value, ok := cc.mutation.AuthorID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: commute.FieldAuthorID,
		})
		_node.AuthorID = value
	}
	if value, ok := cc.mutation.GoToWorkAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: commute.FieldGoToWorkAt,
		})
		_node.GoToWorkAt = value
	}
	if value, ok := cc.mutation.GetOffAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: commute.FieldGetOffAt,
		})
		_node.GetOffAt = value
	}
	return _node, _spec
}

// CommuteCreateBulk is the builder for creating many Commute entities in bulk.
type CommuteCreateBulk struct {
	config
	builders []*CommuteCreate
}

// Save creates the Commute entities in the database.
func (ccb *CommuteCreateBulk) Save(ctx context.Context) ([]*Commute, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Commute, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CommuteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CommuteCreateBulk) SaveX(ctx context.Context) []*Commute {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
